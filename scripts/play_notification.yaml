alias: Play notification speaker
icon: "mdi:party-popper"
description: 'Play notification on system chromecast'
mode: parallel
fields:
  speaker:
    description: 'The speaker that will reproduce sound'
    example: media_player.bedroom_ceiling_speaker
  custom_message:
    description: 'Custom message that will be reproduced'
    example: Hello world!
  source:
    description: 'Correct source for playing audio - amplifier sources'
    example: Primary Chromecast
  volume:
    description: "sets the volume on the speaker"
    example: '0.4'
  platform:
    description: 'sets appropriete platform for tts - `tts.cloud_say` or `tts.google_translate_say`'
    example: 'tts.google_translate_say'
  chromecast_device:
    description: 'sets appropriete chromecast device'
    example: 'media_player.living_room_tv'
  delay:
    description: 'sets a delay - mainly reason for monoprice speakers'
    example: '00:00:03'
sequence:


  - choose:
    - conditions:
        - condition: template
          value_template: "{{ chromecast_device == 'media_player.system_chromecast' }}"
      sequence:
        - service: scene.create
          data:
            scene_id: before
            snapshot_entities: "{{ speaker }}"
        - service: script.turn_on
          entity_id: script.set_speaker
          data:
            variables:
              speaker: "{{ speaker }}"
              volume: "{{ volume }}"
              source: "{{ source }}"

        - delay: "{{ delay }}"
        - service: tts.google_translate_say
          entity_id: "media_player.system_chromecast"
          data:
            message: "{{ custom_message }}"
        - wait_for_trigger:
          - platform: state
            entity_id: "media_player.system_chromecast"
            from: 'playing'
            to: 'idle'
          timeout: 10
          continue_on_timeout: true
        - service: scene.turn_on
          data: 
            entity_id: scene.before
    - conditions:
        - condition: template
          value_template: "{{ chromecast_device == 'media_player.living_room_tv' }}"
      sequence:
        - service: scene.create
          data:
            scene_id: before
            snapshot_entities: media_player.livingroom_tv
        - service: tts.google_translate_say
          entity_id: "media_player.living_room_tv"
          data:
            message: "{{ custom_message }}"
        - wait_for_trigger:
          - platform: state
            entity_id: "media_player.living_room_tv"
            from: 'playing'
            to: 'idle'
          timeout: 10
          continue_on_timeout: true
        - service: scene.turn_on
          data: 
            entity_id: scene.before